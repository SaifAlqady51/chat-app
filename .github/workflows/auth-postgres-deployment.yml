name: Deploy Auth PostgreSQL to EKS

on:
  push:
    branches: ["*"]
    paths:
      - 'services/auth-service/k8s/postgres-deployment.yml'
      - 'services/auth-service/k8s/postgres-pvc.yml'
  workflow_dispatch:
  pull_request:

jobs:
  deploy:
    name: Deploy Auth PostgreSQL
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: secrets

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl cluster-info
          kubectl auth whoami

      - name: Check existing resources
        run: |
          echo "=== Current PVCs ==="
          kubectl get pvc --all-namespaces || true
          
          echo "=== Storage Classes ==="
          kubectl get storageclass || true

      - name: Clean up previous failed deployment
        run: |
          echo "Cleaning up existing resources..."
          
          # Delete deployment first (this will stop using the PVC)
          kubectl delete deployment auth-postgres --ignore-not-found=true --timeout=120s || true
          
          # Wait for pods to be terminated
          echo "Waiting for pods to terminate..."
          kubectl wait --for=delete pod -l app=auth-postgres --timeout=120s || true
          
          # Delete all possible PVC variants
          kubectl delete pvc auth-postgres-pvc --ignore-not-found=true --timeout=120s || true
          kubectl delete pvc auth-postgres-pvc-v2 --ignore-not-found=true --timeout=120s || true
          
          # Clean up any PVCs with the auth-postgres label
          kubectl delete pvc -l app=auth-postgres --ignore-not-found=true --timeout=120s || true
          
          # Wait a bit more to ensure cleanup is complete
          sleep 15
          
          # Verify cleanup
          echo "=== Verifying cleanup ==="
          kubectl get deployment auth-postgres || echo "✓ Deployment deleted"
          kubectl get pvc -l app=auth-postgres || echo "✓ All auth-postgres PVCs deleted"
          kubectl get pods -l app=auth-postgres || echo "✓ No pods remaining"

      - name: Deploy PostgreSQL PVC
        run: |
          echo "Creating PVC..."
          kubectl apply -f services/auth-service/k8s/postgres-pvc.yml
          
          # Wait for PVC to be bound
          echo "Waiting for PVC to be bound..."
          timeout 120 kubectl wait --for=condition=bound pvc/auth-postgres-pvc || {
            echo "PVC not bound, checking status..."
            kubectl describe pvc auth-postgres-pvc
            exit 1
          }

      - name: Deploy PostgreSQL Deployment
        run: |
          echo "Creating deployment..."
          kubectl apply -f services/auth-service/k8s/postgres-deployment.yml

      - name: Wait for rollout with debugging
        run: |
          timeout 300 kubectl rollout status deployment/auth-postgres || {
            echo "Rollout failed, investigating..."
          
            echo "=== Pod Status ==="
            kubectl get pods -l app=auth-postgres -o wide
          
            echo "=== Pod Details ==="
            for pod in $(kubectl get pods -l app=auth-postgres -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
              echo "--- Describing pod $pod ---"
              kubectl describe pod $pod
              echo "--- Logs for $pod ---"
              kubectl logs $pod --previous || kubectl logs $pod || echo "No logs available"
            done
          
            echo "=== PVC Status ==="
            kubectl describe pvc auth-postgres-pvc
          
            echo "=== Events ==="
            kubectl get events --field-selector involvedObject.name=auth-postgres --sort-by=.metadata.creationTimestamp
          
            exit 1
          }

      - name: Verify deployment success
        run: |
          echo "=== Final Deployment Status ==="
          kubectl get deployment auth-postgres -o wide
          
          echo "=== Final Pod Status ==="
          kubectl get pods -l app=auth-postgres -o wide
          
          echo "=== Service Status ==="
          kubectl get svc -l app=auth-postgres
          
          echo "=== PVC Status ==="
          kubectl get pvc auth-postgres-pvc