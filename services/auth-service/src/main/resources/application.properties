# Application
spring.application.name=auth-service
server.port=8081


# PostgreSQL
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}

# Connection Pool
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=5

# JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# JWT
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}
jwt.refreshExpiration=${JWT_REFRESH_EXPIRATION}

# Security
spring.autoconfigure.exclude=${SPRING_AUTOCONFIGURE_EXCLUDE}

# Redis
spring.redis.host=${SPRING_REDIS_HOST}
spring.redis.port=${SPRING_REDIS_PORT}
spring.redis.password=${SPRING_REDIS_PASSWORD}
logging.level.org.springframework.data.redis=DEBUG

# Actuator Base Configuration
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true

# Health Indicator Configuration
management.health.db.enabled=true
management.health.redis.enabled=false
management.health.diskspace.enabled=true

# Probe Groups (Kubernetes optimized)
management.endpoint.health.group.liveness.include=livenessState,ping
management.endpoint.health.group.readiness.include=readinessState,ping
# For application.properties
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.com.example.auth_service=DEBUG

# Kafka Producer Configuration
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=userExistenceRequest:com.example.common.events.UserExistenceRequest,userExistenceResponse:com.example.common.events.UserExistenceResponse

# Kafka Consumer Configuration
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=auth-service-group
spring.kafka.consumer.auto-offset-reset=earliest
logging.level.org.apache.kafka=DEBUG
logging.level.com.example.auth_service.service.UserExistenceKafkaService=DEBUG
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.kafka.producer.properties.spring.json.add.type.headers=true



# Error Handling
spring.kafka.listener.type=batch
spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE
spring.kafka.listener.missing-topics-fatal=false
logging.level.org.apache.kafka.clients=WARN
logging.level.org.springframework.kafka=INFO