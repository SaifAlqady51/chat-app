name: Deploy Auth PostgreSQL to EKS

on:
  push:
    branches: ["*"]
    paths:
      - 'services/auth-service/k8s/postgres-deployment.yml'
  workflow_dispatch:
  pull_request:

jobs:
  deploy:
    name: Deploy Auth PostgreSQL
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: secrets

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl cluster-info
          kubectl auth whoami

      - name: Create PostgreSQL secret if not exists
        run: |
          if ! kubectl get secret postgres-secret &>/dev/null; then
            echo "Creating postgres secret..."
            kubectl create secret generic postgres-secret \
              --from-literal=password=${{ secrets.POSTGRES_PASSWORD }}
          else
            echo "Secret already exists"
          fi

      - name: Clean up previous deployment
        run: |
          echo "Cleaning up existing resources..."
          kubectl delete deployment auth-postgres --ignore-not-found=true --timeout=120s || true
          kubectl wait --for=delete pod -l app=auth-postgres --timeout=120s || true
          sleep 10

      - name: Deploy PostgreSQL
        run: |
          echo "Creating deployment..."
          # Apply and ignore PVC errors (will be removed from deployment file)
          kubectl apply -f services/auth-service/k8s/postgres-deployment.yml || {
            echo "Some resources failed to create (likely PVC permissions)"
            echo "Checking if deployment was created..."
            kubectl get deployment auth-postgres && echo "Deployment created successfully despite PVC error"
          }

      - name: Wait for rollout
        run: |
          timeout 300 kubectl rollout status deployment/auth-postgres || {
            echo "Rollout failed, investigating..."
          
            echo "=== Pod Status ==="
            kubectl get pods -l app=auth-postgres -o wide
          
            echo "=== Pod Details (Critical for Pending status) ==="
            for pod in $(kubectl get pods -l app=auth-postgres -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo ""); do
              echo "--- Describing pod $pod ---"
              kubectl describe pod $pod
              echo ""
            done
          
            echo "=== Recent Events ==="
            kubectl get events --sort-by=.metadata.creationTimestamp | tail -20
          
            echo "=== Deployment Status ==="
            kubectl get deployment auth-postgres -o yaml
          
            echo "=== ReplicaSet Status ==="
            kubectl get rs -l app=auth-postgres -o wide
          
            exit 1
          }

      - name: Verify deployment success
        run: |
          echo "=== Final Status ==="
          kubectl get deployment auth-postgres -o wide
          kubectl get pods -l app=auth-postgres -o wide
          kubectl get svc -l app=auth-postgres