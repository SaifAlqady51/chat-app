name: Deploy Auth PostgreSQL to EKS

on:
  push:
    branches: ["*"]
    paths:
      - 'services/auth-service/k8s/postgres-deployment.yml'
      - 'services/auth-service/k8s/rbac.yml'
  workflow_dispatch:
  pull_request:

jobs:
  deploy:
    name: Deploy Auth PostgreSQL
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: secrets

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure EKS cluster access
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl cluster-info
          kubectl auth whoami

      - name: Setup RBAC
        run: kubectl apply -f services/auth-service/k8s/rbac.yml

      - name: Check cluster resources before deployment
        run: |
          echo "=== Node Status ==="
          kubectl get nodes -o wide
          echo "=== Available Resources ==="
          kubectl top nodes || echo "Metrics server not available"
          echo "=== Storage Classes ==="
          kubectl get storageclass

      - name: Deploy Auth PostgreSQL resources
        run: |
          kubectl apply -f services/auth-service/k8s/postgres-deployment.yml --server-side
          
          # Wait for deployment with better monitoring
          echo "Waiting for PostgreSQL deployment..."
          kubectl rollout status deployment/auth-postgres --timeout=600s

      - name: Verify deployment success
        run: |
          echo "=== Final Status ==="
          kubectl get pods -l app=auth-postgres
          kubectl get svc auth-postgres
          
          # Test database connectivity (optional)
          kubectl run postgres-test --rm -i --restart=Never --image=postgres:15 -- \
            psql -h auth-postgres -U postgres -c "SELECT version();" || echo "Connection test failed"

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Deployment Failed - Debugging ==="
          kubectl get deployments -l app=auth-postgres
          kubectl get pods -l app=auth-postgres -o wide
          kubectl describe pods -l app=auth-postgres
          kubectl logs -l app=auth-postgres --tail=100 --previous=false
          kubectl get events --sort-by=.metadata.creationTimestamp | tail -20