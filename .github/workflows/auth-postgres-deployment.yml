name: Deploy Auth PostgreSQL to EKS

on:
  push:
    branches: ["*"]
    paths:
      - 'services/auth-service/k8s/postgres-deployment.yml'
      - 'services/auth-service/k8s/rbac.yml'
  workflow_dispatch:
  pull_request:

jobs:
  deploy:
    name: Deploy Auth PostgreSQL
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    environment: secrets

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure EKS cluster access
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --role-arn ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Setup RBAC (one-time setup)
        run: |
          kubectl apply -f services/auth-service/k8s/rbac.yml
        continue-on-error: true  # In case RBAC already exists

      - name: Update aws-auth ConfigMap (one-time setup)
        run: |
          # Check if our role mapping already exists
          if ! kubectl get configmap aws-auth -n kube-system -o yaml | grep -q "github-actions"; then
            echo "Adding IAM role mapping to aws-auth ConfigMap"
            kubectl patch configmap aws-auth -n kube-system --type merge -p "
            {
              \"data\": {
                \"mapRoles\": \"$(kubectl get configmap aws-auth -n kube-system -o jsonpath='{.data.mapRoles}')- rolearn: ${{ secrets.AWS_IAM_ROLE_ARN }}\n  username: github-actions\n  groups:\n    - github-actions-group\n\"
              }
            }"
          else
            echo "IAM role mapping already exists"
          fi
        continue-on-error: true  # In case ConfigMap update fails

      - name: Verify kubectl authentication
        run: |
          kubectl auth whoami
          kubectl auth can-i create deployments
          kubectl auth can-i create services

      - name: Deploy Auth PostgreSQL resources
        run: |
          kubectl apply -f services/auth-service/k8s/postgres-deployment.yml --server-side
          kubectl rollout status deployment/auth-postgres --timeout=300s